MEMORY {
    RAM: start = $0000, size = $fe00, fill = yes, define = yes;
    ZP: start = $0000, size = $0100, define = yes;
    STACK: start = $0100, size = $0100, define = yes;
    HEAP: start = $0200, size = $FDFF;

    ROM: file = %O, start = $ff00, size = $100, fill = yes, define = yes;
    IO: start = $fe00, size = $100, define = yes;
    # VECTORS: file = %O, start = $FFFC, size = $4, fill = yes;
}
SEGMENTS {
    # ZEROPAGE_SYS: load = ZP,       type = zp;
    ZEROPAGE: load = ZP, start = $0080, type = zp;
    
    CODE:     load = RAM, type = ro;
    RODATA:   load = RAM, type = ro;
    BSS:    load = RAM, type = bss, define = yes, align = $100;
    # VECTORS: load = ROM, start = $fffc, type = overwrite;
}
# SYMBOLS {
#     os_alloc: type = import;
# }
FORMATS {
    o65: os = lunix, version = 0, type = small,
{%- for os_call in os_calls %}
        import = {{ os_call.exported_name }}
    {%- if os_call.is_last -%}
        ;
    {%- else -%}
        ,
    {%- endif -%}
{% endfor %}
}

FILES {
    %O: format = o65;

}
