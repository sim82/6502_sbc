[os_calls.os_alloc]
implementation = "alloc_page_span"
ordinal = 0
description = "allocate contiguous span of pages"
calling = ["a in: number pages", "a out: start page", "set carry on success"]
[os_calls.os_getc]
implementation = "getc_blocking"
ordinal = 1
description = "get character from standard input (uart 0)"
calling = ["a out: input char"]
[os_calls.os_putc]
implementation = "putc"
ordinal = 2
description = "put character to standard output (uart 0)"
calling = ["a in: output char"]
[os_calls.os_fopen]
implementation = "file_open_raw"
ordinal = 3
description = "open file in raw buffered mode on fileio channel (uart 1)"
[os_calls.os_fgetc]
implementation = "fgetc_buf"
ordinal = 4
description = "read single character from open buffered file"
calling = ["a out: input char"]
[os_calls.os_print_dec]
implementation = "print_dec"
ordinal = 5
description = "print 16bit decimal value on standard output"
calling = ["a in: low byte", "x in: high byte"]
[os_calls.os_putnl]
implementation = "put_newline"
ordinal = 6
description = "print newline on standard output"
[os_calls.os_print_string]
implementation = "print_message"
ordinal = 7
description = "print string on standard output"
calling = ["a in: atring address low", "x in: string address high"]
[os_calls.os_get_argn]
implementation = "get_argn"
ordinal = 8
description = "get number of command args (argc)"
[os_calls.os_get_arg]
implementation = "get_arg"
ordinal = 9
description = "get command argument by index (argv[i])"
[os_calls.os_get_event]
implementation = "get_event"
ordinal = 10
description = "get current event"
calling = ["a in: event type", "x in: event payload"]
[os_calls.os_event_return]
implementation = "event_return"
ordinal = 11
description = "set event return mode (e.g. keep resident)"
[os_calls.os_free]
implementation = "free_page_span"
ordinal = 12
calling = ["a in: start page"]
description = "free contiguous span of pages"
[os_calls.os_print_fstat]
implementation = "print_fletch16"
ordinal = 13
description = "print stats of current file io"
[os_calls.os_rand]
implementation = "rand_8"
ordinal = 14
description = "return pseudo random number"
calling = ["a out: random number"]
[os_calls.os_set_direct_timer]
implementation = "set_direct_timer"
ordinal = 15
description = "set vector pointer and (and os timer DIV/16) for direct timer (called from irq handler on timer interrupt)"
calling = ["a in: addr low", "x in: addr high", "y in: DIV/16 for os timer events"]
[os_calls.os_dbg_byte]
implementation = "dbg_byte"
ordinal = 16
description = "debug print byte value."
calling = ["ARG0(zp) in: the byte to print as decimal value"]



